CODE = { SOI ~ STATEMENT* ~ EOI? }
STATEMENT = _{
    STATEMENT_LIST ~ (NEWLINE | EOI)
    | IF_TYPECHECKING
    | ANY
}

STATEMENT_LIST = _{ SIMPLE_STATEMENT ~ (";" ~ SIMPLE_STATEMENT)* ~ ";"? }
SIMPLE_STATEMENT = _{
    IMPORT_STATEMENT
    | FROM_IMPORT_STATEMENT
    | MULTILINE_FROM_IMPORT_STATEMENT
    | WILDCARD_FROM_IMPORT_STATEMENT
}

IMPORT_STATEMENT = { "import" ~ MODULE ~ ("as" ~ AS_IDENTIFIER)? }
FROM_IMPORT_STATEMENT = { "from" ~ RELATIVE_MODULE ~ "import" ~ IDENTIFIER ~ ("as" ~ AS_IDENTIFIER)? ~ ("," ~ IDENTIFIER ~ ("as" ~ AS_IDENTIFIER)?)* }
MULTILINE_FROM_IMPORT_STATEMENT = { "from" ~ RELATIVE_MODULE ~ "import" ~ "(" ~ NEWLINE* ~ IDENTIFIER ~ NEWLINE* ~ ("as" ~ NEWLINE* ~ AS_IDENTIFIER)? ~ NEWLINE* ~ ("," ~ NEWLINE* ~ IDENTIFIER ~ NEWLINE* ~ ("as" ~ NEWLINE* ~ AS_IDENTIFIER)? ~ NEWLINE*)* ~ NEWLINE* ~ ","? ~ NEWLINE* ~ ")" }
WILDCARD_FROM_IMPORT_STATEMENT = { "from" ~ RELATIVE_MODULE ~ "import" ~ "*" }

MODULE = @{ IDENTIFIER ~ ("." ~ IDENTIFIER)* }
RELATIVE_MODULE = @{ ("."* ~ MODULE) | "."+ }
IDENTIFIER = @{ (ASCII_ALPHANUMERIC | "_")+ }
AS_IDENTIFIER = { IDENTIFIER }

IF_TYPECHECKING = ${
    "if" ~ WHITESPACE+ ~ ("typing.TYPE_CHECKING" | "TYPE_CHECKING") ~ WHITESPACE* ~ ":" ~
    NEWLINE+ ~
    PUSH("  "+ | "\t"+) ~ IF_TYPECHECKING_STATEMENT_LIST ~ NEWLINE ~
    (
        NEWLINE* ~
        PEEK ~ IF_TYPECHECKING_STATEMENT_LIST ~ NEWLINE ~
        NEWLINE*
    )* ~
    DROP
}
IF_TYPECHECKING_STATEMENT_LIST = !{ STATEMENT_LIST }

WHITESPACE = _{
    " "
    | ("\\" ~ NEWLINE)
}
