CODE = { SOI ~ FRAGMENT* ~ EOI }

FRAGMENT = {
    MULTILINE_STRING ~ NEWLINE?
    | IMPORT_STATEMENT_LIST ~ NEWLINE?
    | SINGLELINE_IF_TYPECHECKING ~ NEWLINE?
    | IF_TYPECHECKING ~ NEWLINE?
    | (!NEWLINE ~ ANY)+ ~ NEWLINE?
    | NEWLINE
}

IMPORT_STATEMENT_LIST = { IMPORT_STATEMENT ~ (";" ~ IMPORT_STATEMENT)* ~ ";"? }
IMPORT_STATEMENT = _{
    SIMPLE_IMPORT_STATEMENT
    | FROM_IMPORT_STATEMENT
    | MULTILINE_FROM_IMPORT_STATEMENT
    | WILDCARD_FROM_IMPORT_STATEMENT
}
SIMPLE_IMPORT_STATEMENT = { "import " ~ MODULE ~ AS_IDENTIFIER? ~ ("," ~ MODULE ~ AS_IDENTIFIER?)* }
FROM_IMPORT_STATEMENT = { "from " ~ RELATIVE_MODULE ~ "import " ~ IDENTIFIER ~ AS_IDENTIFIER? ~ ("," ~ IDENTIFIER ~ AS_IDENTIFIER?)* }
MULTILINE_FROM_IMPORT_STATEMENT = {
    "from " ~ RELATIVE_MODULE ~ "import " ~ "(" ~ (_COMMENT | NEWLINE)* ~ IDENTIFIER ~ AS_IDENTIFIER? ~ ("," ~ (_COMMENT | NEWLINE)* ~ IDENTIFIER ~ AS_IDENTIFIER?)* ~ ","? ~ (_COMMENT | NEWLINE)* ~ ")"
}
WILDCARD_FROM_IMPORT_STATEMENT = { "from " ~ RELATIVE_MODULE ~ "import " ~ "*" }
AS_IDENTIFIER = { "as " ~ IDENTIFIER }

MODULE = @{ IDENTIFIER ~ ("." ~ IDENTIFIER)* }
RELATIVE_MODULE = @{ ("."* ~ MODULE) | "."+ }
IDENTIFIER = @{ (ASCII_ALPHANUMERIC | "_")+ }

SINGLELINE_IF_TYPECHECKING = { "if " ~ ("typing.TYPE_CHECKING" | "TYPE_CHECKING") ~ ":" ~ IMPORT_STATEMENT_LIST }
IF_TYPECHECKING = ${
    "if " ~ WHITESPACE* ~ ("typing.TYPE_CHECKING" | "TYPE_CHECKING") ~ WHITESPACE* ~ ":" ~ (!NEWLINE ~ ANY)* ~ NEWLINE ~
    (WHITESPACE* ~ NEWLINE)* ~
    PUSH("  "+ | "\t"+) ~ IF_TYPECHECKING_FRAGMENT ~
    (
        WHITESPACE* ~ NEWLINE
        | PEEK ~ IF_TYPECHECKING_FRAGMENT
    )* ~
    DROP
}
IF_TYPECHECKING_FRAGMENT = !{
    MULTILINE_STRING ~ NEWLINE?
    | IMPORT_STATEMENT_LIST ~ NEWLINE?
    | (!NEWLINE ~ ANY)+ ~ NEWLINE?
}


MULTILINE_STRING = { MULTILINE_STRING_SINGLE | MULTILINE_STRING_DOUBLE }
MULTILINE_STRING_SINGLE = {
    "'''"
    ~ (!"'''" ~ ANY)*
    ~ "'''"
}
MULTILINE_STRING_DOUBLE = {
    "\"\"\""
    ~ (!"\"\"\"" ~ ANY)*
    ~ "\"\"\""
}


WHITESPACE = _{ " " | ("\\" ~ NEWLINE)}
_COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }
